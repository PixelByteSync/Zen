/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Streak } from "./Streak";
import { StreakCountArgs } from "./StreakCountArgs";
import { StreakFindManyArgs } from "./StreakFindManyArgs";
import { StreakFindUniqueArgs } from "./StreakFindUniqueArgs";
import { CreateStreakArgs } from "./CreateStreakArgs";
import { UpdateStreakArgs } from "./UpdateStreakArgs";
import { DeleteStreakArgs } from "./DeleteStreakArgs";
import { StreakService } from "../streak.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Streak)
export class StreakResolverBase {
  constructor(
    protected readonly service: StreakService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Streak",
    action: "read",
    possession: "any",
  })
  async _streaksMeta(
    @graphql.Args() args: StreakCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Streak])
  @nestAccessControl.UseRoles({
    resource: "Streak",
    action: "read",
    possession: "any",
  })
  async streaks(@graphql.Args() args: StreakFindManyArgs): Promise<Streak[]> {
    return this.service.streaks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Streak, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Streak",
    action: "read",
    possession: "own",
  })
  async streak(
    @graphql.Args() args: StreakFindUniqueArgs
  ): Promise<Streak | null> {
    const result = await this.service.streak(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Streak)
  @nestAccessControl.UseRoles({
    resource: "Streak",
    action: "create",
    possession: "any",
  })
  async createStreak(@graphql.Args() args: CreateStreakArgs): Promise<Streak> {
    return await this.service.createStreak({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Streak)
  @nestAccessControl.UseRoles({
    resource: "Streak",
    action: "update",
    possession: "any",
  })
  async updateStreak(
    @graphql.Args() args: UpdateStreakArgs
  ): Promise<Streak | null> {
    try {
      return await this.service.updateStreak({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Streak)
  @nestAccessControl.UseRoles({
    resource: "Streak",
    action: "delete",
    possession: "any",
  })
  async deleteStreak(
    @graphql.Args() args: DeleteStreakArgs
  ): Promise<Streak | null> {
    try {
      return await this.service.deleteStreak(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
